using System.Linq;

namespace WorkflowGenerator;

public static class CodeGenerators
{
   public static string GetWorkflowRunMethod(
      string workflowIdentifier,
      string workflowRunIdentifier,
      string[] paramsArray,
      string[] paramIdentifiersArray,
      string? returnType)
      => $$"""
           public static Task{{(returnType != null ? $"<{returnType}>" : "")}} Execute{{workflowIdentifier}}Async(
             this TemporalClient client,
             {{string.Join(",\n  ", paramsArray)}}{{(paramsArray.Any() ? "," : "")}}
             WorkflowOptions options)
           {
              return client.ExecuteWorkflowAsync(({{workflowIdentifier}} wf) =>
                  wf.{{workflowRunIdentifier}}({{string.Join(", ", paramIdentifiersArray)}}), options);
           }
           
           public static Task<WorkflowHandle<{{workflowIdentifier}}{{(returnType != null ? $", {returnType}" : "")}}>> Start{{workflowIdentifier}}Async(
             this TemporalClient client,
             {{string.Join(",\n  ", paramsArray)}}{{(paramsArray.Any() ? "," : "")}}
             WorkflowOptions options)
           {
              return client.StartWorkflowAsync(({{workflowIdentifier}} wf) =>
                  wf.{{workflowRunIdentifier}}({{string.Join(", ", paramIdentifiersArray)}}), options);
           }
           """;
    
    public static string GetExtensionsClass(string methodsString, string namespaceName, string[] usings)
        => $$"""
             // <auto-generated/>
             {{string.Join("\n", usings.Select(x => "using " + x + ";"))}}
             
             namespace {{namespaceName}};
             
             public static class TemporalClientExtensions
             {
             {{methodsString}}
             }
             """;
}